package com.service.soap.test;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Reader;
import java.math.BigInteger;
import java.net.URI;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Scanner;
import java.util.regex.Pattern;

import javax.ws.rs.client.Client;
import javax.ws.rs.client.ClientBuilder;
import javax.ws.rs.client.WebTarget;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.UriBuilder;

import org.glassfish.jersey.client.ClientConfig;


public class SoapToRest {
	
	public ClientConfig config =new ClientConfig();
	Client client = ClientBuilder.newClient(config);
	WebTarget service = client.target(getBaseURI());
	
	final String chemin = "G:\\Sys_Win\\MyProgramme\\20. Java_ee\\SoapImpl\\WebContent\\WEB-INF\\authFile\\auth.txt";
	final String cheminTemp ="G:\\Sys_Win\\MyProgramme\\20. Java_ee\\SoapImpl\\WebContent\\WEB-INF\\authFile\\authTemp.txt";
	final File fichier = new File(chemin);
	final File fichierTemp = new File(cheminTemp);

	public FileWriter writer = null;
	public FileWriter writerTemp = null;
	public Reader reader = null;
	public Reader deleter = null;
	
	public File FileToDelete;
	public File FileToRename;
	
	public String Response = null;
	
	public String pseudo = null;
	public String lineToAuth = null;
	public String lineToDel = null;
	public String pseudoTofound = null;
	public String pseudoToDelete = null;
	public String pseudoInscription = null;
	
	public String mdp = null;
	public String mdpValide = null;
	public String mdpToFound = null;
	public String mdpToDelete = null;
	public String []tabElements;
	public String mdpHashmd5 = null;
	
	public String id ;
	
	private static URI getBaseURI() {
		return UriBuilder.fromUri("http://localhost:8080/driveServer").build();
	}
	
	public SoapToRest(){
		
	}

	
public boolean inscription(String pseudoInscrit, String mdpSend, String mdpVerification){
		
		this.pseudoInscription = pseudoInscrit;
		this.mdp = mdpSend;
		this.mdpValide = mdpVerification;
		System.out.println("ok");
		if(!mdp.equals(mdpValide)){
			return false;
		}
		else{
			try {
				//Génération du MD5
				MessageDigest msg = MessageDigest.getInstance("MD5");
				msg.reset();
				msg.update(mdp.getBytes());
				byte []digest = msg.digest();
				BigInteger bigInt = new BigInteger(1,digest);
				mdpHashmd5 = bigInt.toString(16);
				while (mdpHashmd5.length() < 32) {
					mdpHashmd5 = "0"+mdpHashmd5;
				}
			} catch (NoSuchAlgorithmException e1) {
				e1.printStackTrace();
			}
			
			try {
				fichier.createNewFile();
				writer = new FileWriter(fichier, true);
				try {
					reader = new FileReader(chemin);
				} catch (FileNotFoundException e) {
					e.printStackTrace();
				}
				@SuppressWarnings("resource")
				Scanner scanner = new Scanner(reader);
				scanner.useDelimiter(Pattern.compile("[\t\n]"));
				
				while (scanner.hasNextLine()) {
					pseudo = scanner.nextLine();
					tabElements = pseudo.split(",");
					if(tabElements[0].equals(pseudoInscription)){
						try {
							reader.close();
							writer.close();
						} catch (IOException e) {
							e.printStackTrace();
						}
						return false;
					}
				}
				try {
					reader.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			catch (IOException e) {
				e.printStackTrace();
			}
			try{
				String newLine = System.getProperty("line.separator");
				writer.write(pseudoInscription+","+mdpHashmd5 + newLine);
				writer.close();
			}
			catch (IOException e) {
				System.out.println(System.getProperties());
				System.out.println("Impossible de créer le fichier auth.txt");
				e.printStackTrace();
			}
			return true;
		}
	}
	
	public String auth(String pseudoAuth, String mdp){
		this.pseudoTofound = pseudoAuth;
		this.mdpToFound = mdp;
		boolean trouve = false;

		try {
			//Génération du MD5
			MessageDigest msg = MessageDigest.getInstance("MD5");
			msg.reset();
			msg.update(mdpToFound.getBytes());
			byte []digest = msg.digest();
			BigInteger bigInt = new BigInteger(1,digest);
			mdpHashmd5 = bigInt.toString(16);
			while (mdpHashmd5.length() < 32) {
				mdpHashmd5 = "0"+mdpHashmd5;
			}
		} catch (NoSuchAlgorithmException e1) {
			e1.printStackTrace();
		}
		
		try {
			reader = new FileReader(chemin);
		} catch (FileNotFoundException e1) {
			e1.printStackTrace();
			System.out.println("not found");
		}
		
		
		@SuppressWarnings("resource")
		Scanner scan = new Scanner(reader);
		scan.useDelimiter(Pattern.compile("[\t\n]"));
		
		while (scan.hasNextLine()) {
			lineToAuth = scan.nextLine();
			tabElements = lineToAuth.split(",");
			if ( pseudoTofound.equals(tabElements[0]) && mdpHashmd5.equals(tabElements[1]) ){
				trouve = true;
			}
		}
		
		try {
			reader.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		if(trouve){
			Response = service.path("rest").path("server").path("creation").request().accept(MediaType.TEXT_PLAIN).get(String.class);
			return Response;
		}
		else{
			return "NoId";
		}
		
	}

	public boolean getOut(String pseudoSupp,String Pass ){
		this.pseudoToDelete = pseudoSupp;
		this.mdpToDelete = Pass;
		boolean supp = false;

		try {
			//Génération du MD5
			MessageDigest msg = MessageDigest.getInstance("MD5");
			msg.reset();
			msg.update(mdpToDelete.getBytes());
			byte []digest = msg.digest();
			BigInteger bigInt = new BigInteger(1,digest);
			mdpHashmd5 = bigInt.toString(16);
			while (mdpHashmd5.length() < 32) {
				mdpHashmd5 = "0"+mdpHashmd5;
			}
		} catch (NoSuchAlgorithmException e1) {
			e1.printStackTrace();
		}
		
		try {
			deleter = new FileReader(chemin);
			
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		try {
			fichierTemp.createNewFile();
			writerTemp = new FileWriter(fichierTemp, true);
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		System.out.println("ok");
		@SuppressWarnings("resource")
		Scanner scan = new Scanner(deleter);
		while (scan.hasNextLine()) {
			lineToDel = scan.nextLine();
			tabElements = lineToDel.split(",");
			if(!(pseudoToDelete.equals(tabElements[0]) && mdpHashmd5.equals(tabElements[1]))){
				try {
					String newLine = System.getProperty("line.separator");
					writerTemp.write(tabElements[0]+","+tabElements[1]+ newLine);
				}catch (IOException e) {
					e.printStackTrace();
				}
			}
			else{
				supp = true;
			}
		}
		
		try {
			writerTemp.close();
			deleter.close();
		} catch (IOException e) {
			e.printStackTrace();
		}

		FileToDelete = new File("G:\\Sys_Win\\MyProgramme\\20. Java_ee\\SoapImpl\\WebContent\\WEB-INF\\authFile\\auth.txt");
		FileToDelete.delete();
		FileToRename = new File("G:\\Sys_Win\\MyProgramme\\20. Java_ee\\SoapImpl\\WebContent\\WEB-INF\\authFile\\authTemp.txt");
		FileToRename.renameTo(new File("G:\\Sys_Win\\MyProgramme\\20. Java_ee\\SoapImpl\\WebContent\\WEB-INF\\authFile\\auth.txt"));
		if(supp){
			return true;
		}
		else{
			return false;
		}
	}

	
}
